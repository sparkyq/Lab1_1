#include "stm32f4xx_hal.h"
#include "lcd.h" // Підключення бібліотеки для LCD
#include "DHT22.h" // Підключення бібліотеки для DHT22

/* Остання замість tm1637.h */
// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

/* Остання замість tm1637.h */

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

/* Остання замість tm1637.h */

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

/* Остання замість tm1637.h */

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

/* Остання замість tm1637.h */

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

/* Остання замість tm1637.h */

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

// Інші зміни включають необхідні бібліотеки та визначення змінних

// Оголошення для DHT22
#define DHT22_DATA_PIN GPIO_PIN_0
#define DHT22_DATA_PORT GPIOA

/* USER CODE BEGIN PV */
short int read_temp_array[SIZE_READ_ARRAY];
uint32_t pointer = -1;
uint8_t last_state = 0;
uint8_t mode_menu = 0;

DHT22_Data_TypeDef DHT22_Data;
/* USER CODE END PV */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM7)
    {
      TimerService();
    }
}
void output_lcd(){
    char lcd_buffer[17];
    switch(mode_menu){
        case 0:{
            sprintf(lcd_buffer, "Temp: %d", read_temp_array[pointer%SIZE_READ_ARRAY]);
            break;
        }
        case 1:{
            if(pointer < SIZE_READ_ARRAY){
                short int max_temp = read_temp_array[0];
                for(uint8_t i = 1; i < pointer; i++){
                    if(max_temp < read_temp_array[i]){
                        max_temp = read_temp_array[i];
                    }
                }
                sprintf(lcd_buffer, "Max: %d", max_temp);
            }else{
                short int max_temp = read_temp_array[0];
                for(uint8_t i = 1; i < SIZE_READ_ARRAY; i++){
                    if(max_temp < read_temp_array[i]){
                        max_temp = read_temp_array[i];
                    }
                }
                sprintf(lcd_buffer, "Max: %d", max_temp);
            }
            break;
        }
        case 2:{
            if(pointer < SIZE_READ_ARRAY){
                short int min_temp = read_temp_array[0];
                for(uint8_t i = 1; i < pointer; i++){
                    if(min_temp > read_temp_array[i]){
                        min_temp = read_temp_array[i];
                    }
                }
                sprintf(lcd_buffer, "Min: %d", min_temp);
            }else{
                short int min_temp = read_temp_array[0];
                for(uint8_t i = 1; i < SIZE_READ_ARRAY; i++){
                    if(min_temp > read_temp_array[i]){
                        min_temp = read_temp_array[i];
                    }
                }
                sprintf(lcd_buffer, "Min: %d", min_temp);
            }
            break;
        }
        default:{
            break;
        }
    }
    LCD_Clear();
    LCD_SetCursor(0,0);
    LCD_Print(lcd_buffer);
}
void read_DHT22(){
    if(DHT22_ReadData(&DHT22_Data) == DHT22_OK){
        // DHT22_Data.Temperature - температура
        // DHT22_Data.Humidity - вологість
        // Можете використовувати ці дані для виводу на LCD або зберігання
        read_temp_array[(++pointer)%SIZE_READ_ARRAY] = (short int)DHT22_Data.Temperature;
        SetTask(output_lcd);
    }
    SetTimerTask(read_DHT22, 5000); // Оновлюємо кожні 5 секунд
}
void read_button(){
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET && last_state == 0){
        last_state = 1;
        mode_menu = (mode_menu+1)%3;
        SetTask(output_lcd);
        SetTask(read_button);
    }else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET && last_state == 1){
        last_state = 0;
        SetTimerTask(read_button, 5);
    }else{
        SetTask(read_button);
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_TIM6_Init();
  MX_TIM7_Init();
  LCD_Init(); // Ініціалізація LCD
  DHT22_Init(&htim2, DHT22_DATA_PORT, DHT22_DATA_PIN); // Ініціалізація DHT22

  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim3);
  LCD_Clear();
  LCD_SetCursor(0,0);
  LCD_Print("Initializing...");
  HAL_TIM_Base_Start_IT(&htim7);
  InitScheduler();
  SetTask(read_DHT22);
  SetTask(read_button);
  SetTask(output_lcd);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      TaskManager();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2
